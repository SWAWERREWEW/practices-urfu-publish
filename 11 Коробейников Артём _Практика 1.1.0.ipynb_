{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732700561302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО: Коробейников Артём Юрьевич**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","    def __init__(self, money):\n","        self.m = money\n","\n","\n","    def give_money(self, salary, man):\n","        man.get_money(salary)\n","\n","\n","    def get_money(self, salary):\n","        self.m += salary\n","\n","\n","class Manager(Employee):\n","    def __init__(self, money):\n","        self.m = money\n","\n","\n","    def get_money(self, salary):\n","        self.m += salary\n","\n","\n","class Developer(Manager):\n","    def __init__(self, money):\n","        self.m = money\n","\n","\n","    def get_money(self, salary):\n","        self.m += salary\n","\n","\n","best = Employee(10_000_000)\n","big = Manager(10_000)\n","little = Developer(100)\n","print(best.m)\n","print(big.m)\n","best.give_money(12_000, big)\n","print(big.m)"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732702305108,"user_tz":-300,"elapsed":373,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"26bf6a22-c4ec-4343-904f-2ad64bb10e47"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["10000000\n","10000\n","22000\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["# boat. ship. yacht. aircraft carrier.\n","\n","class Boat:\n","    name = \"Лодка\"\n","    def __init__(self, capacity_persons, color, material):\n","        self.ca = capacity_persons\n","        self.col = color\n","        self.m = material\n","\n","\n","    def info(self):\n","      print(f\"Вместимость человек: {self.ca}\",\n","            f\"\\nЦвет: {self.col}\",\n","            f\"\\nМатериал: {self.m}\\n\")\n","\n","\n","class Ship(Boat):\n","    def __init__(self, capacity_persons, color, material, count):\n","        self.c = count\n","        super().__init__(capacity_persons, color, material)\n","\n","\n","class Yacht(Ship):\n","    def info(self):\n","      print(f\"Вместимость человек: {self.ca}\",\n","            f\"\\nЦвет: {self.col}\",\n","            f\"\\nМатериал: {self.m}\\n\")\n","\n","\n","class Aircraft_carrier(Yacht):\n","    def info(self):\n","      print(f\"Вместимость человек: {self.ca}\",\n","            f\"\\nЦвет: {self.col}\",\n","            f\"\\nМатериал: {self.m}\")\n","\n","boat = Boat(5, \"wood\", \"white\")\n","ship = Ship(20, \"metal\", \"white\", 1)\n","yacht = Yacht(80, \"metal\", \"white\", 1)\n","aircraft_carrier = Aircraft_carrier(1000, \"metal\", \"white\", 1)\n","boat.info()\n","ship.info()\n","yacht.info()\n","aircraft_carrier.info()"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732706911184,"user_tz":-300,"elapsed":367,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"c2d70feb-5293-4d2a-8420-a43a32921d33"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Вместимость человек: 5 \n","Цвет: wood \n","Материал: white\n","\n","Вместимость человек: 20 \n","Цвет: metal \n","Материал: white\n","\n","Вместимость человек: 80 \n","Цвет: metal \n","Материал: white\n","\n","Вместимость человек: 1000 \n","Цвет: metal \n","Материал: white\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["# Product, Order, Customer, и ShoppingCart.\n","\n","class Product:\n","    def __init__(self, prise, availability, category):\n","        self.p = prise\n","        self.a = availability\n","        self.c = category\n","\n","\n","class Order(Product):\n","    # self.a = потраченная сумма на покупку с учётом скидки и налогов\n","    def pay(self, man):\n","        man\n","        self.a -= 1\n","        discount = 5 # скидка\n","        taxes = 60   # налоги\n","        self.p *= (1 - discount/100)\n","        self.p += taxes\n","\n","\n","class Customer(Product):\n","    def __init__(self, money):\n","        super().__init__(money)\n","\n","\n","magnit = Product(500, 34, \"eat\")\n","buy = Order(500, 34, \"eat\")\n","print(magnit.a,\";\", magnit.p)\n","buy.pay()\n","print(buy.a, \";\", buy.p)\n","buy.pay()\n","print(buy.a, \";\", buy.p)"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732707676464,"user_tz":-300,"elapsed":367,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"d3d70a3a-9690-40d9-9f30-db81a1f984b3"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["34 ; 500\n","33 ; 535.0\n","32 ; 568.25\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":[],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}