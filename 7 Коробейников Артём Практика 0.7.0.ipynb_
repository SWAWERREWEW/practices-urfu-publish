{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730282417209}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["Коробейников Артём Юрьевич"],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["pip install request"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WSWlCtTF4qTR","executionInfo":{"status":"ok","timestamp":1730300128104,"user_tz":-300,"elapsed":2556,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"0f27f0be-e971-41a7-aa4f-6e706f74fd37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[31mERROR: Could not find a version that satisfies the requirement request (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for request\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["# импорт библиотеки\n","import requests\n","from datetime import datetime\n","\n","\n","# функция для отправки запроса\n","def send_request(url):\n","    # отправляем запрос\n","    response = requests.get(url)\n","    # проверяем код ответа (==200?)\n","    if response.status_code == 200:\n","        # возвращаем данные\n","        return response.json()\n","\n","# получение данных из словаря\n","def clear_data(data):\n","    # получаем дату\n","    current_date = datetime.today().date()\n","    current_date = f'{current_date.day}.{current_date.month}'\n","    # получаем температуру\n","    temperature = data['current']['temperature_2m']\n","    temperature_format = data['current_units']['temperature_2m']\n","    # получаем код погоды\n","    weather_code = data['current']['weather_code']\n","    # проверяем чему равен код\n","    if weather_code == 2:\n","        weather = 'нет осадков, ясно'\n","    elif weather_code in [45, 48]:\n","        weather = 'нет осадков, туман'\n","    else:\n","        weather = 'выгляни в окно и посмотри сам'\n","\n","    message = f'Сегодня ({current_date}) погода {temperature}{temperature_format}, {weather}'\n","\n","    return message\n","\n","\n","def main(params):\n","    url = f'https://api.open-meteo.com/v1/forecast?latitude={params[0]}&longitude={params[1]}&current=temperature_2m,weather_code&timezone=Europe%2FMoscow&forecast_days=1'\n","    # documentetion -> текущая погода -> погодный код\n","    data = send_request(url)\n","    message = clear_data(data)\n","    print(message)\n","\n","\n","# params = input('Введите координаты:').split(', ')\n","params = [56.50, 60.35]\n","main(params)"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730300138563,"user_tz":-300,"elapsed":953,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"858dc26b-b288-4f5f-9fb2-e878bb10acad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Сегодня (30.10) погода -1.0°C, выгляни в окно и посмотри сам\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","def get_name_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    # data_keys = ['abilities', 'base_experience' ! , 'cries', ...\n","    d_base = data[\"forms\"]\n","    # d_base = [{'name': 'clefairy', ...}]\n","    return str(d_base[0][\"name\"]) + \".\"\n","\n","\n","def get_type_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    data_keys = []\n","    for k in data.keys():\n","        data_keys.append(k)\n","    types_list = data[\"types\"]\n","    # types_list = [{'slot': 1, 'type': {'name': 'poison', 'url': ...}},\n","    # {'slot': 2, 'type': {'name': 'ground', 'url': ...}}]\n","    types = []\n","    for t in types_list:\n","        types.append(t[\"type\"][\"name\"])\n","    # return [types_list[0][\"type\"][\"name\"], types_list[1][\"type\"][\"name\"]]\n","    types_str = \"\"\n","    for s in range(len(types)):\n","        if types[s] != types[len(types)-1]:\n","            types_str += types[s] + \", \"\n","        else:\n","            types_str += types[s] + \".\"\n","    return types_str\n","\n","\n","def get_data_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    data_keys = []\n","    for k in data.keys():\n","        data_keys.append(k)\n","    return data_keys\n","\n","\n","def get_height_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    return str(data[\"height\"]) + \".\"\n","\n","\n","def get_weight_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    return str(data[\"weight\"]) + \".\"\n","\n","\n","def get_abilities_pokemon(id):\n","    id = str(id)\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{id}/\"\n","    data = send_request(url)\n","    \"\"\" data[\"abilities\"] =\n","    [{'ability': {'name': 'keen-eye', 'url': ...},\n","    'is_hidden': False, 'slot': 1}, {'ability': {'name': 'sniper', 'url':...,\n","    'is_hidden': True, 'slot': 3}]\n","    \"\"\"\n","    # return data[\"abilities\"][0][\"ability\"][\"name\"] + \", \"\n","    # data[\"abilities\"][1][\"ability\"][\"name\"]\n","    abilities = []\n","    for a in data[\"abilities\"]:\n","        abilities.append(a[\"ability\"][\"name\"])\n","    abilities_str = \"\"\n","    for s in range(len(abilities)):\n","        if abilities[s] != abilities[len(abilities)-1]:\n","            abilities_str += abilities[s] + \", \"\n","        else:\n","            abilities_str += abilities[s]\n","    return abilities_str + \".\"\n","\n","\n","name_pokemon = input(\"Необходим id, чтоб узнать имя и другие данные:\")\n","print(\"Имя покемона: \" + get_name_pokemon(name_pokemon))\n","print(\"Тип покемона: \" + str(get_type_pokemon(name_pokemon)))\n","print(\"Вес покемона: \" + str(get_weight_pokemon(name_pokemon)))\n","print(\"Рост покемона: \" + str(get_height_pokemon(name_pokemon)))\n","print(\"Способности покемона: \" + str(get_abilities_pokemon(name_pokemon)))\n","# print(get_data_pokemon(name_pokemon))"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730373135875,"user_tz":-300,"elapsed":8031,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"680318c5-4e58-4b69-edc0-25bb5ed8e1d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Необходим id, чтоб узнать имя и другие данные:45\n","Имя покемона: vileplume.\n","Тип покемона: grass, poison.\n","Вес покемона: 186.\n","Рост покемона: 12.\n","Способности покемона: chlorophyll, effect-spore.\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","def get_posts(url):\n","    data = send_request(url)\n","    posts_list = []\n","    for p in data:\n","        posts_list.append(p[\"title\"])\n","    return posts_list # список постов в формате json\n","\n","\n","def get_post(url, id):\n","    data = send_request(url)\n","    for p in range(len(data)):\n","        if data[p][\"id\"] == id:\n","            return data[p]\n","\n","\n","def get_data(url, id):\n","    data = send_request(url)\n","    for p in range(len(data)):\n","        if data[p][\"id\"] == id:\n","            return \"\"\"userId: {u}\n","id: {i}\n","title: {t}\n","body: {b}\n","\"\"\".format(u=data[p][\"userId\"], i=id, t=data[p][\"title\"], b=data[p][\"body\"])\n","\n","\n","url = \"https://jsonplaceholder.typicode.com/posts\"\n","print(\"Список постов: \" + str(get_posts(url)))\n","id = input(\"По введённому id мы найдём пост:\")\n","print(get_post(url, int(id)))\n","print(get_data(url, int(id)))"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730565352437,"user_tz":-300,"elapsed":2381,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"e6874b1a-1372-4920-ddb0-f9ce2b3e54d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Список постов: ['sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'qui est esse', 'ea molestias quasi exercitationem repellat qui ipsa sit aut', 'eum et est occaecati', 'nesciunt quas odio', 'dolorem eum magni eos aperiam quia', 'magnam facilis autem', 'dolorem dolore est ipsam', 'nesciunt iure omnis dolorem tempora et accusantium', 'optio molestias id quia eum', 'et ea vero quia laudantium autem', 'in quibusdam tempore odit est dolorem', 'dolorum ut in voluptas mollitia et saepe quo animi', 'voluptatem eligendi optio', 'eveniet quod temporibus', 'sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio', 'fugit voluptas sed molestias voluptatem provident', 'voluptate et itaque vero tempora molestiae', 'adipisci placeat illum aut reiciendis qui', 'doloribus ad provident suscipit at', 'asperiores ea ipsam voluptatibus modi minima quia sint', 'dolor sint quo a velit explicabo quia nam', 'maxime id vitae nihil numquam', 'autem hic labore sunt dolores incidunt', 'rem alias distinctio quo quis', 'est et quae odit qui non', 'quasi id et eos tenetur aut quo autem', 'delectus ullam et corporis nulla voluptas sequi', 'iusto eius quod necessitatibus culpa ea', 'a quo magni similique perferendis', 'ullam ut quidem id aut vel consequuntur', 'doloremque illum aliquid sunt', 'qui explicabo molestiae dolorem', 'magnam ut rerum iure', 'id nihil consequatur molestias animi provident', 'fuga nam accusamus voluptas reiciendis itaque', 'provident vel ut sit ratione est', 'explicabo et eos deleniti nostrum ab id repellendus', 'eos dolorem iste accusantium est eaque quam', 'enim quo cumque', 'non est facere', 'commodi ullam sint et excepturi error explicabo praesentium voluptas', 'eligendi iste nostrum consequuntur adipisci praesentium sit beatae perferendis', 'optio dolor molestias sit', 'ut numquam possimus omnis eius suscipit laudantium iure', 'aut quo modi neque nostrum ducimus', 'quibusdam cumque rem aut deserunt', 'ut voluptatem illum ea doloribus itaque eos', 'laborum non sunt aut ut assumenda perspiciatis voluptas', 'repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem', 'soluta aliquam aperiam consequatur illo quis voluptas', 'qui enim et consequuntur quia animi quis voluptate quibusdam', 'ut quo aut ducimus alias', 'sit asperiores ipsam eveniet odio non quia', 'sit vel voluptatem et non libero', 'qui et at rerum necessitatibus', 'sed ab est est', 'voluptatum itaque dolores nisi et quasi', 'qui commodi dolor at maiores et quis id accusantium', 'consequatur placeat omnis quisquam quia reprehenderit fugit veritatis facere', 'voluptatem doloribus consectetur est ut ducimus', 'beatae enim quia vel', 'voluptas blanditiis repellendus animi ducimus error sapiente et suscipit', 'et fugit quas eum in in aperiam quod', 'consequatur id enim sunt et et', 'repudiandae ea animi iusto', 'aliquid eos sed fuga est maxime repellendus', 'odio quis facere architecto reiciendis optio', 'fugiat quod pariatur odit minima', 'voluptatem laborum magni', 'et iusto veniam et illum aut fuga', 'sint hic doloribus consequatur eos non id', 'consequuntur deleniti eos quia temporibus ab aliquid at', 'enim unde ratione doloribus quas enim ut sit sapiente', 'dignissimos eum dolor ut enim et delectus in', 'doloremque officiis ad et non perferendis', 'necessitatibus quasi exercitationem odio', 'quam voluptatibus rerum veritatis', 'pariatur consequatur quia magnam autem omnis non amet', 'labore in ex et explicabo corporis aut quas', 'tempora rem veritatis voluptas quo dolores vero', 'laudantium voluptate suscipit sunt enim enim', 'odit et voluptates doloribus alias odio et', 'optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut', 'dolore veritatis porro provident adipisci blanditiis et sunt', 'placeat quia et porro iste', 'nostrum quis quasi placeat', 'sapiente omnis fugit eos', 'sint soluta et vel magnam aut ut sed qui', 'ad iusto omnis odit dolor voluptatibus', 'aut amet sed', 'ratione ex tenetur perferendis', 'beatae soluta recusandae', 'qui qui voluptates illo iste minima', 'id minus libero illum nam ad officiis', 'quaerat velit veniam amet cupiditate aut numquam ut sequi', 'quas fugiat ut perspiciatis vero provident', 'laboriosam dolor voluptates', 'temporibus sit alias delectus eligendi possimus magni', 'at nam consequatur ea labore ea harum']\n","По введённому id мы найдём пост:5\n","{'userId': 1, 'id': 5, 'title': 'nesciunt quas odio', 'body': 'repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque'}\n","userId: 1\n","id: 5\n","title: nesciunt quas odio\n","body: repudiandae veniam quaerat sunt sed\n","alias aut fugiat sit autem sed est\n","voluptatem omnis possimus esse voluptatibus quis\n","est aut tenetur dolor neque\n","\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","def add_post(title, content, userid):\n","    \"\"\"Реализуйте функцию, которая принимает заголовок, содержимое и ID\n","    пользователя (информация вводится с помощью input()), выполняет POST-запрос\n","    для создания нового поста и возвращает информацию о созданном посте в\n","    формате JSON https://www.google.com/url?q=https%3A%2F%2Fjsonplaceholder.typicode.com%2Fposts\"\"\"\n","    data = requests.post(\"https://jsonplaceholder.typicode.com/posts/\", json={\"userId\": userid, \"id\": 101, \"title\": title, \"body\": content})\n","    return data.text\n","\n","\n","\n","def put_post(id, title, content):\n","    \"\"\"Реализуйте функцию, которая принимает ID поста, новый заголовок и новое\n","    содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате\n","    JSON\"\"\"\n","    post = {\"userId\": 1, \"id\": id, \"title\": title, \"body\": content}\n","    data = requests.put(f\"https://jsonplaceholder.typicode.com/posts/{str(101)}\", post)\n","    return data.text\n","\n","\n","def del_post(id):\n","    response = requests.delete(f\"https://jsonplaceholder.typicode.com/posts/{id}\")\n","    return response.status_code\n","\n","\n","list_data = input(\"\"\"Напишите заголовок, содержимое и ID пользователя через\n","точку с запятиой и пробел:\"\"\").split(\"; \")\n","title = list_data[0]\n","content = list_data[1]\n","userid = list_data[2]\n","id = 101\n","print(add_post(title, content, userid))\n","print(put_post(id, title, content))\n","print(del_post(id))"],"metadata":{"id":"jZUIdwq96DNl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730953188220,"user_tz":-300,"elapsed":15760,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"0cd3985b-e12c-4ed0-92c5-48e0c8f376ad"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Напишите заголовок, содержимое и ID пользователя через\n","точку с запятиой и пробел:wrwrrwe; 3ewerwrwerr; 3333\n","{\n","  \"userId\": \"3333\",\n","  \"id\": 101,\n","  \"title\": \"wrwrrwe\",\n","  \"body\": \"3ewerwrwerr\"\n","}\n","TypeError: Cannot read properties of undefined (reading 'id')\n","    at update (/app/node_modules/json-server/lib/server/router/plural.js:262:24)\n","    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)\n","    at next (/app/node_modules/express/lib/router/route.js:137:13)\n","    at next (/app/node_modules/express/lib/router/route.js:131:14)\n","    at Route.dispatch (/app/node_modules/express/lib/router/route.js:112:3)\n","    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)\n","    at /app/node_modules/express/lib/router/index.js:281:22\n","    at param (/app/node_modules/express/lib/router/index.js:354:14)\n","    at param (/app/node_modules/express/lib/router/index.js:365:14)\n","    at Function.process_params (/app/node_modules/express/lib/router/index.js:410:3)\n","200\n"]}]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","def get_dogs(url):\n","    data = send_request(url)\n","    data_dogs = []\n","    for d in data['message'].keys():\n","        data_dogs.append(d)\n","    return data_dogs\n","\n","\n","def get_images(url, listd):\n","    \"\"\"Реализуйте возможность ввода нескольких пород собак через запятую\n","    Вывидем страны, в которым живут эти породы собак\"\"\"\n","    data = send_request(url)\n","    data_dogs = []\n","    for d in data['message'].keys():\n","        data_dogs.append(d)\n","    data_images = {}\n","    for s in data['message'].keys():\n","        for dd in listd:\n","            url = \"https://dog.ceo/api/breeds/image/random/\"\n","            if dd == s:\n","                data_images[dd] = send_request((url+dd))['message']\n","                continue\n","    return data_images\n","\n","\n","url = \"https://dog.ceo/api/breeds/list/all\"\n","phase1 = get_dogs(url)\n","print(phase1)\n","dogs = input(\"Введите несколько парод собак через запятую:\").split(\", \")\n","print(get_images(url, dogs))"],"metadata":{"id":"5xti3KRP4Kzp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730554450095,"user_tz":-300,"elapsed":13861,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"c3872404-6493-41ed-9b3a-7fe9c1e5daf9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['affenpinscher', 'african', 'airedale', 'akita', 'appenzeller', 'australian', 'bakharwal', 'basenji', 'beagle', 'bluetick', 'borzoi', 'bouvier', 'boxer', 'brabancon', 'briard', 'buhund', 'bulldog', 'bullterrier', 'cattledog', 'cavapoo', 'chihuahua', 'chippiparai', 'chow', 'clumber', 'cockapoo', 'collie', 'coonhound', 'corgi', 'cotondetulear', 'dachshund', 'dalmatian', 'dane', 'danish', 'deerhound', 'dhole', 'dingo', 'doberman', 'elkhound', 'entlebucher', 'eskimo', 'finnish', 'frise', 'gaddi', 'germanshepherd', 'greyhound', 'groenendael', 'havanese', 'hound', 'husky', 'keeshond', 'kelpie', 'kombai', 'komondor', 'kuvasz', 'labradoodle', 'labrador', 'leonberg', 'lhasa', 'malamute', 'malinois', 'maltese', 'mastiff', 'mexicanhairless', 'mix', 'mountain', 'mudhol', 'newfoundland', 'otterhound', 'ovcharka', 'papillon', 'pariah', 'pekinese', 'pembroke', 'pinscher', 'pitbull', 'pointer', 'pomeranian', 'poodle', 'pug', 'puggle', 'pyrenees', 'rajapalayam', 'redbone', 'retriever', 'ridgeback', 'rottweiler', 'saluki', 'samoyed', 'schipperke', 'schnauzer', 'segugio', 'setter', 'sharpei', 'sheepdog', 'shiba', 'shihtzu', 'spaniel', 'spitz', 'springer', 'stbernard', 'terrier', 'tervuren', 'vizsla', 'waterdog', 'weimaraner', 'whippet', 'wolfhound']\n","Введите несколько парод собак через запятую:australian, wolfhound, bakharwal\n","{'australian': ['https://images.dog.ceo/breeds/stbernard/n02109525_2943.jpg'], 'bakharwal': ['https://images.dog.ceo/breeds/poodle-medium/WhatsApp_Image_2022-08-06_at_4.48.38_PM.jpg'], 'wolfhound': ['https://images.dog.ceo/breeds/rajapalayam-indian/Rajapalayam-dog.jpg']}\n"]}]}]}