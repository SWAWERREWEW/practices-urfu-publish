{"cells":[{"cell_type":"markdown","metadata":{"id":"fLDS5f_mCnPa"},"source":["ФИО: Коробейников Артём Юрьевич"]},{"cell_type":"markdown","metadata":{"id":"-CSHUbWzCqeM"},"source":["# Задание (совместное с преподавателем)\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"a_flBjZOCwYz"},"source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":265,"status":"ok","timestamp":1732097753178,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"},"user_tz":-300},"id":"G4bUraN4CwBI","outputId":"59f15d81-406b-4787-b0b4-5c686cf3b512"},"outputs":[{"name":"stdout","output_type":"stream","text":["Oleg \n"," k\n"]}],"source":["class Employee:\n","    vacation_days = 28 # дни отпуска\n","\n","\n","    def __init__(self, first_name, second_name, gender, legs=2):\n","        self.first_name = first_name\n","        self.second_name = second_name\n","        self.gender = gender\n","        self.legs = legs\n","        self.remaining_days = self.vacation_days\n","\n","\n","    def consume_vacation(self, days):\n","        self.remaining_vataion_days -= days\n","\n","\n","    def vacation_details(self):\n","        return f\"Осталось дней отпуска {self.remaining_vacation_days}\"\n","\n","\n","employee = Employee(\"Oleg\", \"Cool\", \"m\", \"4\")\n","employee2 = Employee(\"Oleg\", \"Low\", \"m\", \"3\")\n","print(employee.first_name, \"\\n\", \"k\")"]},{"cell_type":"markdown","metadata":{"id":"8XGka5GtEBK1"},"source":["# Задание 1"]},{"cell_type":"markdown","metadata":{"id":"jQ4qqd8nEZBY"},"source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":245,"status":"ok","timestamp":1732100206009,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"},"user_tz":-300},"id":"dG6uNPqTEAvt","outputId":"13f6b6e2-f22e-47c1-d56f-03c61d9ea797"},"outputs":[{"name":"stdout","output_type":"stream","text":["990\n","134\n","Ширина прямоугольника = 45 Длинна прямоугольника = 22\n","9\n"]}],"source":["class Rectangle:\n","    def __init__(self, length, width):\n","        self.l = length\n","        self.w = width\n","\n","\n","    def area(self,):\n","        return self.l * self.w\n","\n","\n","    def perimetr(self,):\n","        return self.l*2 + self.w*2\n","\n","\n","    def print_size(self,):\n","        print(\"Ширина прямоугольника =\", self.l, \"Длинна прямоугольника =\", self.w, end=\"\")\n","        return \"\"\n","\n","\n","t = Rectangle(45, 22)\n","\n","print(t.area())\n","print(t.perimetr())\n","print(t.print_size())\n","print(9)"]},{"cell_type":"markdown","metadata":{"id":"0ct1u6lqE73j"},"source":["# Задание 2"]},{"cell_type":"markdown","metadata":{"id":"FOpIpcLxE-WK"},"source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":238,"status":"ok","timestamp":1732101759122,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"},"user_tz":-300},"id":"WWXNIUrCE99W","outputId":"9f8b58cf-e129-4369-9101-4e3ce73716f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["2000\n","Аккаунт Mr. q был пополнен на 900 до 2900\n","С аккаунта Mr. q было списано 6 до 2894\n","Баланс 2894\n","Изначальный баланс 0\n"]}],"source":["class BankAccountсо:\n","    # Метод для инициализации владельца счета: имя владельца счета и установите\n","    # начальный баланс на 0.\n","    def __init__(self, account_holder, balance=0):\n","        self.a = account_holder\n","        self.b = balance\n","\n","\n","    # deposit(amount): Добавьте указанную сумму к балансу.\n","    def deposit(self, amount):\n","        self.b += amount\n","        print(f\"Аккаунт {self.a} был пополнен на {amount} до {self.b}\")\n","\n","\n","    # withdraw(amount): Вычесть указанную сумму из баланса, если средств\n","    # достаточно; в противном случае вывести предупреждение.\n","    def withdraw(self, amountminus):\n","        if (self.b - amountminus) > 0:\n","            self.b -= amountminus\n","            print(f\"С аккаунта {self.a} было списано {amountminus} до {self.b}\")\n","        elif (self.b - amountminus) <= 0:\n","            print(\"Недостаточно средств\")\n","\n","\n","    # get_balance(): Возврат текущего баланса.\n","    def get_balance(self,):\n","        return self.b\n","\n","\n","q = BankAccountсо(\"Mr. q\", 2000)\n","print(q.b)\n","q.deposit(900)\n","q.withdraw(6)\n","balance = q.get_balance()\n","print(\"Баланс\", balance)\n","t = BankAccountсо(\"Mr. t\")\n","print(\"Изначальный баланс\", t.b)"]},{"cell_type":"markdown","metadata":{"id":"C5DX5Uf2FfP6"},"source":["# Задание 3"]},{"cell_type":"markdown","metadata":{"id":"0cR-MYepFgz6"},"source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oz9BZbhAFwua","executionInfo":{"status":"ok","timestamp":1732196111032,"user_tz":-300,"elapsed":23649,"user":{"displayName":"Артём Коробейников","userId":"11566160400159462171"}},"outputId":"98e8d34d-111b-487f-d6b8-72b28e3d1554"},"outputs":[{"output_type":"stream","name":"stdout","text":["Дисклеймер\n","Если вы напишите вариант ответа и покакой-то причине вам выведится ваш же ответ,\n","пожалуйста просто напишите ваш вариант ответа повторно и должно всё заработать.\n","Мы постараемся позже это исправить.\n","Чтобы вызвать статистику вашего персонажа можно написать слово state.\n","Чтобы выключить игру можно написать exit.\n","\n","Введите имя вашего персонажа\n","Выберите тип оружия (лук, магия, меч, топор, копьё)\n","Вы боевой рыцарь, мирно странствующий по миру, но решивший\n","ненадолго остановиться в небольшой деревеньке рядом с замком, но вдруг вы\n","слышите от прохожих новости о том, что на замок напал дракон и скорее всего\n","позже он направится на эту мирную деревню. До замка вам идти недалеко и вы\n","можете даже сразу отправиться в путь\n","\n","Вы остановились у выхода из деревни\n","1) Пойти в бой с драконом.\n","или вы всегда можете написать \"статиситка\" или \"с\", если хотите посмотреть\n","статистику вашего персонажа или написать \"Выход\", чтобы выключить игру.\n","Ваш выбор:1\n","\n","И вот вы входите в замок из\n","которого выбегают мирные жители и видите перед собой дракона, разрушающего\n","замок и беспощадно разбрасывающегося войнами, которым никак не удаётся\n","противостоять дракону!\n","И только ваща отвага способна остановить его!\n","\n","Вы сражаетесь с драконом! Дракон рычыт на вас!\n","Здоровье дракона 180000\n","\n","(Вы всё также можете посмотреть свою статистику, написав статистика или с)\n","1) Атаковать дракона!\n","Ваш ход:1\n","hp someone  108961\n","71039\n","\n","Вы атаковали дракона!\n","Вы ранили его уроном 71039 и у него осталось 108961!\n","Но он атакует уроном в 4.4 в ответ и он взял булыжник от замка и бросил в вас!\n","Ваша броня немного сдержала удар до 0.22!\n","и у вас осталось 99.648!\n","\n","Вы сражаетесь с драконом! Дракон рычыт на вас!\n","Здоровье дракона 108961\n","\n","(Вы всё также можете посмотреть свою статистику, написав статистика или с)\n","1) Атаковать дракона!\n","Ваш ход:1\n","hp someone  54263\n","54698\n","\n","Вы атаковали дракона!\n","Вы ранили его уроном 54698 и у него осталось 54263!\n","Но он атакует уроном в 4.8 в ответ и он взял булыжник от замка и бросил в вас!\n","Ваша броня немного сдержала удар до 0.0!\n","и у вас осталось 99.264!\n","\n","Вы сражаетесь с драконом! Дракон рычыт на вас!\n","Здоровье дракона 54263\n","\n","(Вы всё также можете посмотреть свою статистику, написав статистика или с)\n","1) Атаковать дракона!\n","Ваш ход:1\n","hp someone  -6046\n","60309\n","\n","Вы атаковали дракона!\n","Вы ранили его уроном 60309 и у него осталось -6046!\n","Но он атакует уроном в 3.7 в ответ и он ударил своим вас большим хвостом!\n","Ваша броня немного сдержала удар до 0.296!\n","и у вас осталось 98.96799999999999!\n","\n","Вы победили\n"]}],"source":["from random import randint\n","\n","\n","class person:\n","    def __init__(self, name, hp, damage, armor):\n","        self.n = name\n","        self.hp = hp\n","        self.d = damage\n","        self.a = armor\n","\n","\n","    def lost_hp(self, minus_hp):\n","        if self.a == 0:\n","            self.hp -= minus_hp\n","            print(\"hp someone \", self.hp)\n","        else:\n","            self.hp -= (minus_hp * self.a)\n","\n","\n","info = \"\"\"Дисклеймер\n","Если вы напишите вариант ответа и покакой-то причине вам выведится ваш же ответ,\n","пожалуйста просто напишите ваш вариант ответа повторно и должно всё заработать.\n","Мы постараемся позже это исправить.\n","Чтобы вызвать статистику вашего персонажа можно написать слово state.\n","Чтобы выключить игру можно написать exit.\n","\"\"\"\n","print(info)\n","name = input(\"Введите имя вашего персонажа\")\n","weapon = input(\"Выберите тип оружия (лук, магия, меч, топор, копьё)\")\n","hp = 100\n","damage = randint(22500, 90000) # от 225 до 900\n","armor = (0.01 * randint(0, 9))\n","# Броня опред\n","main_character = person(name, hp, damage, armor)\n","\n","hp_dragon = 90000 * 2\n","damage_dragon = randint(2, 5) + randint(1, 9) * 0.1\n","dragon = person(\"dragon\", hp_dragon, damage_dragon, 0)\n","\n","game = \"start\"\n","skip = \"no\"\n","while game != \"end\":\n","    if skip == \"no\":\n","        history = \"\"\"Вы боевой рыцарь, мирно странствующий по миру, но решивший\n","ненадолго остановиться в небольшой деревеньке рядом с замком, но вдруг вы\n","слышите от прохожих новости о том, что на замок напал дракон и скорее всего\n","позже он направится на эту мирную деревню. До замка вам идти недалеко и вы\n","можете даже сразу отправиться в путь\n","\"\"\"\n","        print(history)\n","    choice = \"\"\"Вы остановились у выхода из деревни\n","1) Пойти в бой с драконом.\n","или вы всегда можете написать \"статиситка\" или \"с\", если хотите посмотреть\n","статистику вашего персонажа или написать \"Выход\", чтобы выключить игру.\n","Ваш выбор:\"\"\"\n","    answer = input(choice)\n","    print()\n","    if \"exit\" in answer:\n","        game = \"end\"\n","        print(\"Вы покинули игру.\")\n","    elif \"1\" in answer:\n","        start_fight_with_dargon_history = \"\"\"И вот вы входите в замок из\n","которого выбегают мирные жители и видите перед собой дракона, разрушающего\n","замок и беспощадно разбрасывающегося войнами, которым никак не удаётся\n","противостоять дракону!\n","И только ваща отвага способна остановить его!\n","\"\"\"\n","        print(start_fight_with_dargon_history)\n","        end = \"unknown\"\n","        while end == \"unknown\":\n","            main_character.damage = randint(22500, 90000) # от 225 до 900\n","            dragon.damage = randint(2, 5) + randint(1, 9) * 0.1\n","            main_character.armor = (0.01 * randint(0, 9))\n","            if main_character.hp <= 0:\n","                print(\"Дракон убил вашего персонажа. Но мы его воскресили.\")\n","            answer_fight_str = f\"\"\"Вы сражаетесь с драконом! Дракон рычыт на вас!\n","Здоровье дракона {dragon.hp}\n","\n","(Вы всё также можете посмотреть свою статистику, написав статистика или с)\n","1) Атаковать дракона!\n","Ваш ход:\"\"\"\n","            answer_fight = input(answer_fight_str)\n","            if \"1\" in answer_fight:\n","                dragon.lost_hp(main_character.damage)\n","                print(main_character.damage)\n","                print()\n","                main_character.lost_hp(dragon.damage)\n","                list_answers_dragon = [\"ударил своим вас большим хвостом\",\n","\"ранил вас своим огненным дыханием\", \"взял булыжник от замка и бросил в вас\"]\n","                answer_fight = f\"\"\"Вы атаковали дракона!\n","Вы ранили его уроном {main_character.damage} и у него осталось {dragon.hp}!\n","Но он атакует уроном в {dragon.damage} в ответ и он {list_answers_dragon[randint(0, 2)]}!\n","Ваша броня немного сдержала удар до {round(dragon.damage * main_character.armor, 4)}!\n","и у вас осталось {main_character.hp}!\"\"\"\n","                print(answer_fight)\n","                print()\n","                if dragon.hp <= 0:\n","                    end = \"win\"\n","                    game = \"end\"\n","                    print(\"Вы победили\")\n","            elif \"exit\" in answer_fight:\n","                end = \"win\"\n","                game = \"end\"\n","                print(\"Вы покинули игру.\")\n","            elif \"статиситка\" in answer_fight or \"с\" in answer_fight or \"state\" in answer_fight:\n","                statet = f\"\"\"Ваша статистика\n","       имя персонажа {main_character.name}\n","  урон средний 45000 ({main_character.damage})\n","  оружее {weapon}\n","  на вас надета волшебная броня уменьшаяющая получаемый урон в 500 раз\n","  здоровье {round(main_character.hp, 4)}\n","\"\"\"\n","                print(statet)\n","                print()\n","    elif \"статиситка\" in answer or \"с\" in answer or \"state\" in answer:\n","        main_character.damage = randint(22500, 90000) # от 225 до 900\n","        dragon.damage = randint(2, 5) + randint(1, 9) * 0.1\n","        main_character.armor = (0.01 * randint(0, 9))\n","        skip = \"yes\"\n","        statet = f\"\"\"Ваша статистика\n","       имя персонажа {main_character.name}\n","  урон средний 45000 ({main_character.damage})\n","  оружее {weapon}\n","  на вас надета волшебная броня уменьшаяющая получаемый урон в 500 раз\n","  здоровье {round(main_character.hp, 4)}\n","\"\"\"\n","        print(statet)\n","        print()"]},{"cell_type":"markdown","metadata":{"id":"b_mJHXcQGI9t"},"source":["# Дополнительное задание\n"]},{"cell_type":"markdown","metadata":{"id":"pnIUdFPcGOVL"},"source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GKKmdfN8GL6f"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732096652003}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}